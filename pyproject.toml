[project]
name = "themefinder"
version = "0.7.0"
description = "A topic modelling Python package designed for analysing one-to-many question-answer data eg free-text survey responses."
authors = [
    { name = "i.AI", email = "packages@cabinetoffice.gov.uk" }
]
readme = "README.md"
license = { text = "MIT" }
keywords = ["nlp", "topic-modeling", "survey-analysis", "langchain", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.10,<3.13"

dependencies = [
    "langchain",
    "langchain-openai==0.1.17",
    "pandas>=2.2.2",
    "python-dotenv>=1.0.1",
    "langfuse==2.29.1",
    "boto3>=1.29",
    "scikit-learn",
    "openpyxl>=3.1.5",
    "pyarrow>=15.0.0",
    "toml>=0.10.2",
    "tiktoken",
    "tenacity",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio>=0.24.0",
    "coverage>=7.6.10",
    "pytest-cov",
    "ruff",
    "black",
    "isort",
    "mypy",
    "pre-commit",
]

docs = [
    "mkdocs>=1.6.1",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-material>=9.5.50",
]

evals = [
    "jupyter",
    "notebook",
    "ipykernel",
]

all = [
    "themefinder[dev,docs,evals]"
]

[project.urls]
Homepage = "https://github.com/i-dot-ai/themefinder/"
Documentation = "https://i-dot-ai.github.io/themefinder/"
Repository = "https://github.com/i-dot-ai/themefinder/"
"Bug Tracker" = "https://github.com/i-dot-ai/themefinder/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/themefinder"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.pytest.ini_options]
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "asyncio: marks tests as async",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.ruff.isort]
known-first-party = ["themefinder"]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = "\\.pyi?$"
extend-exclude = """
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
"""

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langfuse.*",
    "boto3.*",
    "sklearn.*",
    "tiktoken.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true
